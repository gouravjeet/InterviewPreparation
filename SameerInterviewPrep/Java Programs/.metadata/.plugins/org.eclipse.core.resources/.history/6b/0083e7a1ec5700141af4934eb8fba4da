package classes;

import java.util.Collections;
import java.util.Comparator;

import javax.swing.plaf.basic.BasicInternalFrameTitlePane.MaximizeAction;

public class PreemptivePriority extends Scheduling{
	int currentHighestPriority=0;
	
	@Override
	public synchronized Process findNextJob(int currentTime) {
		if(processes.size()!=0){
			Process toReturn = processes.get(0);
			currentHighestPriority = toReturn.getPriority();
			processes.remove(0);
			return toReturn;
		}
		return null;
	}
	
	public PreemptivePriority()
	{
		super();
		RandomNumberGenerator priorityGenerator = new RandomNumberGenerator(1,4);
		for(int i=0;i<processes.size();i++)
		{
			int generatedRandomPriority =  priorityGenerator.generateNumber();
			processes.get(i).setPriority(generatedRandomPriority);
		}
		
		sortProcessesList();
	}
	
	public boolean needsPreemption()
	{
		for(int i=0;i<processes.size();i++)
		{
			int agedTimeTemp = processes.get(i).getAgedTime();
			processes.get(i).setAgedTime(agedTimeTemp+50);
			if(agedTimeTemp+50>1200)
			{
				int processPriorityTemp = processes.get(i).getPriority();
				if(processPriorityTemp>1)
				{
				 processes.get(i).setPriority(processPriorityTemp-1);	
				}
				processes.get(i).setAgedTime(0);
			}
		}
		
		sortProcessesList();
		if(processes.get(0).getPriority()<currentHighestPriority)
		{
			//Preemption occurs
			return true;
		}
		return false;
	}
	
	@Override
	public int schedule(Process currentProcess, Process previousProcess,
			int currentTime) {
		// TODO Auto-generated method stub
		if( activeCPUBoundProcess > 0 )
		{
			processStartsOn(currentProcess,currentTime);
			if(currentProcess.getProcessType().equals(ProcessType.INTERACTIVE)){
				while(currentProcess.getBurstTimeRemaining()!=0 || needsPreemption())
				{
					currentTime=currentTime+10;
					currentProcess.setBurstTimeRemaining(currentProcess.getBurstTimeRemaining()-50);
					//Not req here
					currentProcess.setAgedTime(currentProcess.getAgedTime()+50);
//					if
				}
			}
			
		}
		return 0;
	}
	
	
	public void reducePriorityByOne()
	{
		if(processes.size()!=0){
			for(int i=0;i<processes.size();i++)
			{
				if(processes.get(i).getPriority()>1)
				{
					processes.get(i).setPriority(processes.get(i).getPriority()-1);
				}
					
			}
			sortProcessesList();
		}		
	}
	
	public void sortProcessesList()
	{
		Collections.sort(processes, new Comparator<Process>() {
		    public int compare(Process one, Process other) {
		        return one.getPriority()<other.getPriority()?-1:1;
		    }
		});
	}
	
	
}
