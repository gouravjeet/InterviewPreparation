package classes;

import java.util.ArrayList;


public class Process {

	/*
	 * Creator : Anshul Kataria
	 * RIN : 	 661403632
	 * Email: 	 katara@rpi.edu
	 */

	private int burstCount; // how many burst is remaining
	private int burstTime;  // random burst time assigned
	private int blockTime;
	private String processType; // to store the type of process i.e CPUBound or Interactive
	private String state; // to store state i.e  ready, waiting or processing
	private int processID;
	private int startTime;
	private int endTime;
	private int burstTimeRemaining;
	private int turnAroundTime;
	private int priority;
	private int timeToAvailable;
	private int totalBurstTime;
	private int agedTime;
	public int getAgedTime() {
		return agedTime;
	}
	public void setAgedTime(int agedTime) {
		this.agedTime = agedTime;
	}

	int burstCountForCPUBoundProcess;
	private int burstStart;
	public int getBurstStart() {
		return burstStart;
	}
	public void setBurstStart(int burstStart) {
		this.burstStart = burstStart;
	}

	public int getBurstCountForCPUBoundProcess() {
		return burstCountForCPUBoundProcess;
	}
	public void setBurstCountForCPUBoundProcess(int burstCountForCPUBoundProcess) {
		this.burstCountForCPUBoundProcess = burstCountForCPUBoundProcess;
	}

	private int totalBurstWait;
	ArrayList<Integer> burstsTime;
	ArrayList<Integer> waitsTime;
	ArrayList<Integer> burstsStart;
	ArrayList<Integer> turnAroundBursts;
	public void addturnAroundBursts(int i, int number){
		turnAroundBursts.add(i, number);
		
	}
	public int getTurnAroundBursts(int i){
		return turnAroundBursts.get(i);
		
	}
	public void addBurstsTime(int i, int number){
		burstsTime.add(i, number);
		
	}
	public int getBurstsTime(int i){
		return burstsTime.get(i);
		
	}
	public void addWaitsTime(int i, int number){
		waitsTime.add(i, number);
	}
	public int getWaitsTime(int i){
		return waitsTime.get(i);
		
	}
	public void addBurstsStart(int i, int number){
		burstsStart.add(i, number);
		
	}
	public int getBurstsStart(int i){
		return burstsStart.get(i);
		
	}
	
	public static final int PROCESS = 1;
	public static final int  BURST= 2;
	
	RandomNumberGenerator interactiveBurstTimeGenerator = new RandomNumberGenerator(20,200);
	RandomNumberGenerator interactiveBlockTimeGenerator = new RandomNumberGenerator(1000,4500);
	RandomNumberGenerator CPUBoundBurstTimeGenerator = new RandomNumberGenerator(200,3000);
	RandomNumberGenerator CPUBoundBlockTimeGenerator = new RandomNumberGenerator(1200,3200);
	//RandomNumberGenerator interactiveAvailableTimeGenerator = new RandomNumberGenerator(1000,4500);
	//RandomNumberGenerator CPUBoundAvailableTimeGenerator = new RandomNumberGenerator(200,3000);

	public int generateBurstTime(){
		if(processType.equals(ProcessType.INTERACTIVE)){
			return interactiveBurstTimeGenerator.generateNumber();
		}
		else{
			return CPUBoundBurstTimeGenerator.generateNumber();
		}	
	}
	public int getTotalBurstWait() {
		return totalBurstWait;
	}
	public void setTotalBurstWait(int totalBurstWait) {
		this.totalBurstWait = totalBurstWait;
	}
	public int generateAvailableTime(){
		if(processType.equals(ProcessType.INTERACTIVE)){
			return interactiveBlockTimeGenerator.generateNumber();
		}
		else{
			return CPUBoundBlockTimeGenerator.generateNumber();
		}	
	}
	
	
	public Process(String processType, int burstCount,  String state,  int processID, int startTime, int endTime, int timeToAvailable,int burstCountForCPUBoundProcess) {
		this.processType= processType;
		this.burstCount=burstCount;
		this.state=state;
		this.processID=processID;
		this.startTime=startTime;
		this.endTime=endTime;
		this.totalBurstTime=0;
		this.burstTime=generateBurstTime();
		totalBurstTime=totalBurstTime+burstTime;
		this.burstTimeRemaining=burstTime;
		this.timeToAvailable=timeToAvailable;
		burstsTime=new ArrayList<Integer>();
		addBurstsTime(0, burstTime);
		turnAroundBursts=new ArrayList<Integer>();
		waitsTime=new ArrayList<Integer>();
		burstStart=0; // initial situation
		burstsStart=new ArrayList<Integer>();
		this.burstCountForCPUBoundProcess=burstCountForCPUBoundProcess;
		this.agedTime=0;
	}

	public double turnAroundTime(int type, int currentTime){
		
		if(type==BURST){
			if(this.processType.equals(ProcessType.INTERACTIVE)){
				//return (currentTime-burstStart);
				
				addturnAroundBursts(this.getBurstCount(), (currentTime-getBurstsStart(this.getBurstCount())));
				return getTurnAroundBursts(this.getBurstCount());
				
			}
			else{
				
			
				addturnAroundBursts(this.getBurstCount(), (currentTime-getBurstsStart(this.getBurstCount())));
				return getTurnAroundBursts(this.getBurstCount());
			}
			
		}
		else if(type==PROCESS){ 
			return getAverageTurnAround();
		}
		return 0;
		
	}

	public double getAverageTurnAround(){
		double total=0;
		for (int i=0; i< burstCountForCPUBoundProcess;i++){
			total +=getTurnAroundBursts(i);
		}
		total=total/burstCountForCPUBoundProcess;
		return total;
	}
	public double waitTime(int type, int currentTime){
		
		if(type==BURST){
			
			if(this.processType.equals(ProcessType.INTERACTIVE)){
				//return (currentTime-burstStart-this.getBurstTime());
				addWaitsTime(this.getBurstCount(), (currentTime-getBurstsStart(this.getBurstCount())-getBurstsTime(getBurstCount())));
				return getWaitsTime(this.getBurstCount());
			}
			else{
				addWaitsTime(this.getBurstCount(), (this.getTurnAroundBursts(getBurstCount())-getBurstsTime(this.getBurstCount())));
				return getWaitsTime(getBurstCount());
			}
		}
		else if(type==PROCESS){ 
			
			return getAverageWait();
		}
		return 0;
		
	}
	public double getAverageWait(){
		double total=0;
		for (int i=0; i< burstCountForCPUBoundProcess;i++){
			
			
			total +=getWaitsTime(i);
		}
		total=total/burstCountForCPUBoundProcess;
		return total;
	}
	public int getBurstCount() {
		return burstCount;
	}

	public void setBurstCount(int burstCount) {
		this.burstCount = burstCount;
	}

	public int getBurstTime() {
		return burstTime;
	}

	public void setBurstTime(int burstTime) {
		this.burstTime = burstTime;
	}

	public int getBlockTime() {
		return blockTime;
	}

	public void setBlockTime(int blockTime) {
		this.blockTime = blockTime;
	}

	public String getProcessType() {
		return processType;
	}

	public void setProcessType(String processType) {
		this.processType = processType;
	}

	public String getState() {
		return state;
	}

	public void setState(String state) {
		this.state = state;
	}

	public int getProcessID() {
		return processID;
	}

	public void setProcessID(int processID) {
		this.processID = processID;
	}

	public int getStartTime() {
		return startTime;
	}

	public void setStartTime(int startTime) {
		this.startTime = startTime;
	}

	public int getEndTime() {
		return endTime;
	}

	public void setEndTime(int endTime) {
		this.endTime = endTime;
	}

	public int getBurstTimeRemaining() {
		return burstTimeRemaining;
	}

	public void setBurstTimeRemaining(int burstTimeRemaining) {
		this.burstTimeRemaining = burstTimeRemaining;
	}
	
	public int getTurnAroundTime() {
		return turnAroundTime;
	}
	public void setTurnAroundTime(int turnAroundTime) {
		this.turnAroundTime = turnAroundTime;
	}

	public int getPriority() {
		return priority;
	}
	public void setPriority(int priority) {
		this.priority = priority;
	}

	public int getTimeToAvailable() {
		return timeToAvailable;
	}
	public void setTimeToAvailable(int timeToAvailable) {
		this.timeToAvailable = timeToAvailable;
	}
	public int getTotalBurstTime() {
		return totalBurstTime;
	}
	public void setTotalBurstTime(int totalBurstTime) {
		this.totalBurstTime = totalBurstTime;
	}

}
