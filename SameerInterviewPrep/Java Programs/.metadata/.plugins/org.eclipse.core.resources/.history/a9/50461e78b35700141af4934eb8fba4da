import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;


public class Solution {
 public static ArrayList<Integer> returnRange(int input)
 {
  ArrayList<Integer> rangeArray = new ArrayList<Integer>();	 
  for(int i=4;i>=0;i--)
  {
	  if(input-i>=0)
	  {
		  rangeArray.add(input-i);
	  }
  }
  return rangeArray;
 }
 
 public static void main(String args[])
 {
	 String test = "4 1 3 6 10";
	 String[] splitted = test.split("\\s+");
	 LinkedHashMap<Integer,Integer> countMap = new LinkedHashMap<Integer,Integer>();
	 LinkedHashMap<Integer,Set<Integer>> countMapHousesWithDist = new LinkedHashMap<Integer, Set<Integer>>();
	 int maxDistance=0;;
	 for(int i=0;i<splitted.length;i++)
	 {
		 if(Integer.parseInt(splitted[i])>maxDistance)
		 {
			 maxDistance = Integer.parseInt(splitted[i]);
		 }
	 }
	 for(int i=0;i<maxDistance;i++)
	 {
		 ArrayList<Integer> range = returnRange(i);
		 for(int iter : range)
		 {
			 Set<Integer> tempSet;
			 if(countMap.containsKey(iter))
			 {
				 countMap.put(iter, countMap.get(iter)+1);
				 tempSet = countMapHousesWithDist.get(iter);
				 tempSet.add(iter);
				 countMapHousesWithDist.put(iter,tempSet);
			 }
			 else
			 {
				 countMap.put(iter,1);
				 tempSet = new HashSet<Integer>();
				 tempSet.add(iter);
				 countMapHousesWithDist.put(iter,tempSet);
			 }
		 }
	 }
	 
	 List<Entry<Integer, Integer>> list = new LinkedList<Entry<Integer, Integer>>(countMap.entrySet());
	 Collections.sort(list, new Comparator<Entry<Integer, Integer>>()
		        {
		 	
		            public int compare(Entry<Integer, Integer> o1,
		                    Entry<Integer, Integer> o2)
		            {
		                return o1.getValue()>o2.getValue()?-1:1;
		            }
		        });
	 
	 Iterator it = countMap.entrySet().iterator();
	 Map.Entry entryFirst = (Entry) it.next();
	 int maxValue = (int) entryFirst.getValue();
	 if(maxValue == 4)
	 {
		 System.out.println(entryFirst.getKey()); 
	 }
	 
	 if(countMapHousesWithDist.get(entryFirst.getKey()).size()==5)
	 {
		 System.out.println(entryFirst.getKey());
	 }
	 
	 System.out.println(maxValue);
	 
 }
}
